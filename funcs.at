
// identity
dis self :=
    dis

// konst (equiv to `true`)
dis ever _ :=
    dis

dis . fn :=
    dis fn

fn : dis :=
    dis fn

// flip:
fn <> dis dat :=
    dis (dat fn)

// compose, read as 'of' --- "hello world" toUpper</trim
fn2 </ fn1 dis :=
    (dis fn1) fn2

// compose, read as 'andThen' --- "hello world" trim/>toUpper
fn1 /> fn2 dis :=
    (dis fn1) fn2

dis == dat :=
    _

want ยง have :=
    have ? want => have
