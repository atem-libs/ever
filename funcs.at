
// identity
someValue self :=
    someValue

// konst (equiv to `true`)
this ever that :=
    this

any . anyFunc :=
    any anyFunc

// flip:
anyFunc <> this that :=
    this that.anyFunc

// compose, read as 'andThen' --- "hello world" trim/>toUpper
former /> latter any :=
    any.former latter

// compose, read as 'of' --- "hello world" toUpper</trim
latter </ former any :=
    any.former latter

this == that :=
    _

need ยง have :=
    have ? need => have
