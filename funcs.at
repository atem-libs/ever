
// identity
someValue self :=
    someValue

// konst (equiv to `true`)
useValue ever discardValue :=
    useValue

any . anyFunc :=
    any anyFunc

// flip:
anyFunc <> anyFormer anyLatter :=
    anyFormer anyLatter.anyFunc

// compose, read as 'andThen' --- "hello world" trim/>toUpper
former /> latter any :=
    any.former latter

// compose, read as 'of' --- "hello world" toUpper</trim
latter </ former any :=
    any.former latter

need ยง have :=
    need ? have => have
