
bool    := True, False


True    not := False
False   not := True

/*   another test comment  */
a || b :=
    a   ? True  |= a
        | False |= b bool

//    test comment
a && b :=
    a   ? False |= a
        | True  |= b bool

// ternary of 2 binaries, usage together: (someCondition ⊤ trueExpr ⊥ falseExpr)
when ⊤ then :=
    when    ? True  |= then ever
            | False |= it
fn ⊥ else := else fn


b if Then yay Else nay :=
    b   ? True  |= yay
        | False |= nay


/*
    true := fst
    false := snd
    b not := b: false true
    a or b := a: true b
    a or b := a: a b
    a and b := a: b false
    a and b := a: b a
*/
